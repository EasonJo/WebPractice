<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"><!-- 配置表与实体对象的关系 --><!-- package属性:填写一个包名.在元素内部凡是需要书写完整类名的属性,可以直接写简答类名了. -->
<hibernate-mapping package="cn.eason.many2many">
    <!--
        class元素: 配置实体与表的对应关系的
            name: 完整类名
            table:数据库表名
     -->
    <class name="User" table="sys_user">
        <!-- id元素:配置主键映射的属性
                name: 填写主键对应属性名
                column(可选): 填写表中的主键列名.默认值:列名会默认使用属性名
                type(可选):填写列(属性)的类型.hibernate会自动检测实体的属性类型.
                        每个类型有三种填法: java类型|hibernate类型|数据库类型
                not-null(可选):配置该属性(列)是否不能为空. 默认值:false
                length(可选):配置数据库中列的长度. 默认值:使用数据库类型的最大长度
         -->
        <id name="userId">
            <!-- generator:主键生成策略(明天讲) -->
            <generator class="native" />
        </id>

        <property name="userName" />
        <property name="userCode" />
        <property name="userPassword" />
        <property name="userState" />


        <!--
            cascade级联操作:
		 			save-update: 级联保存更新
		 			delete:级联删除
		 			all:级联保存更新+级联删除
		 	结论: cascade简化代码书写.该属性使不使用无所谓. 建议要用只用save-update.
		 		 如果使用delete操作太过危险.尤其在多对多中.不建议使用.
		 -->
        <set name="roles" table="sys_user_role" cascade="save-update">
            <!--
                key 标签
                column: 当前对象在中间表中的外键名称
            -->
            <key>
                <column name="user_id" />
            </key>
            <!--
            many to many 标签
            class: 关联另一方的类的全路径
            column: 关联的另一方在终极版的外键名称
            -->
            <many-to-many class="cn.eason.many2many.Role" column="role_id" />
        </set>
    </class>
</hibernate-mapping>