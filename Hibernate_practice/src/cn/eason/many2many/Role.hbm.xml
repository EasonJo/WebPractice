<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE hibernate-mapping PUBLIC
    "-//Hibernate/Hibernate Mapping DTD 3.0//EN"
    "http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd"><!-- 配置表与实体对象的关系 --><!-- package属性:填写一个包名.在元素内部凡是需要书写完整类名的属性,可以直接写简答类名了. -->
<hibernate-mapping package="cn.eason.many2many">
    <!--
        class元素: 配置实体与表的对应关系的
            name: 完整类名
            table:数据库表名
     -->
    <class name="Role" table="sys_role">
        <!-- id元素:配置主键映射的属性
                name: 填写主键对应属性名
                column(可选): 填写表中的主键列名.默认值:列名会默认使用属性名
                type(可选):填写列(属性)的类型.hibernate会自动检测实体的属性类型.
                        每个类型有三种填法: java类型|hibernate类型|数据库类型
                not-null(可选):配置该属性(列)是否不能为空. 默认值:false
                length(可选):配置数据库中列的长度. 默认值:使用数据库类型的最大长度
         -->
        <id name="roleId">
            <!--
            increment: 查询最大值.再加1
	        identity: 主键自增.
            sequence:Oracle使用的
            hilo: hibernate自己实现自增算法
            native: 根据所选数据库三选一
            uuid: 随机字符串
            assigned: 自然主键.
            -->
            <generator class="native" />
        </id>

        <property name="roleName" />
        <property name="roleMemo" />

        <!-- 使用inverse属性
			true: 放弃维护外键关系
			false(默认值):维护关系

		结论: 将来在开发中,如果遇到多对多关系.一定要选择一方放弃维护关系.
			 一般谁来放弃要看业务方向. 例如录入员工时,需要为员工指定所属角色.
			 那么业务方向就是由员工维护角色. 角色不需要维护与员工关系.角色放弃维护
		 -->
        <set name="users" table="sys_user_role" inverse="true">
            <key>
                <column name="role_id" />
            </key>
            <many-to-many column="user_id" class="cn.eason.many2many.User" />
        </set>

    </class>
</hibernate-mapping>