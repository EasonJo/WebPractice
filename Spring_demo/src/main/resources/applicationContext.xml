<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
			http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context
			http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd"
    default-lazy-init="false">

    <!--<bean name="user" class="cn.eason.bean.User" init-method="init" destroy-method="destory">
        <property name="name" value="Eason" />
        <property name="age" value="32" />
        &lt;!&ndash;引用类型&ndash;&gt;
        <property name="car" ref="car"/>
    </bean>-->

    <!-- <bean name="user" class="cn.eason.bean.User" init-method="init" destroy-method="destory">
         <constructor-arg name="name" value="Eason" index="0" type="java.lang.String" />
         <constructor-arg name="age" value="32" />
         &lt;!&ndash;引用类型&ndash;&gt;
         <constructor-arg name="car" ref="car" />
     </bean>

     <bean name="user4" class="cn.eason.bean.User" p:name="Eason" p:age="32" p:car-ref="car" />

     <bean name="car" class="cn.eason.bean.Car" />

     <bean name="user2" class="cn.eason.spring.BeanFactory" factory-method="CreateUser" />
     <bean name="user3" factory-bean="useFactory" factory-method="createUser2" />
     <bean name="useFactory" class="cn.eason.spring.BeanFactory" />


     <bean class="cn.eason.bean.CollectionBeans" name="cb">
         <property name="arr">
             <array>
                 <value>jack</value>
                 <value>rosi</value>
                 <ref bean="user" />
             </array>
         </property>
         <property name="list">
             <list>
                 <value>jack</value>
                 <value>roce</value>
                 <ref bean="car" />
             </list>
         </property>
     </bean>-->

    <context:component-scan base-package="cn.eason" />
    <!--注入多个实例-->
    <bean name="car2" class="cn.eason.bean.Car" p:name="布加迪威龙" p:color="白色" />


    <!--<bean class="cn.eason.service.impl.LoginServiceImpl" name="loginServiceTarget" />-->

    <bean class="cn.eason.springaop.MyAdvice" name="advice" />

    <!--xml 配置的方式实现 AOP-->
    <!--<aop:config>
        &lt;!&ndash;配置切入点&ndash;&gt;
        <aop:pointcut id="pc" expression="execution(* cn.eason.service.impl.*ServiceImpl.*(..))" />
        <aop:aspect ref="advice">
            <aop:before method="before" pointcut-ref="pc" />
            &lt;!&ndash;异常不执行&ndash;&gt;
            <aop:after-returning method="afterReturning" pointcut-ref="pc"/>
            &lt;!&ndash;环绕&ndash;&gt;
            <aop:around method="around" pointcut-ref="pc"/>
            &lt;!&ndash;出现异常执行&ndash;&gt;
            <aop:after-throwing method="afterException" pointcut-ref="pc"/>
            &lt;!&ndash;后置,异常也会执行&ndash;&gt;
            <aop:after method="after" pointcut-ref="pc"/>
        </aop:aspect>
    </aop:config>-->

    <!--这种方式是使用注解的方式完整织入-->
    <aop:aspectj-autoproxy />

    <!--使用 spring jdbc 操作数据库-->
    <!--<bean name="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource" p:driverClass="com.mysql.jdbc.Driver"
    p:jdbcUrl="jdbc:mysql:///hibernate" p:user="pujl" p:password="102107" />
    使用 JdbcDaoSupport 的方式引入此类,就不再需要手动注入 jdbctemplate 了
    <bean name="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" p:dataSource-ref="datasource" />-->


    <!--使用 properties 文件的方式配置数据库信息-->
    <context:property-placeholder file-encoding="UTF-8" location="classpath:db.properties" />
    <bean name="datasource" class="com.mchange.v2.c3p0.ComboPooledDataSource" p:jdbcUrl="${jdbc.jdbcUrl}"
        p:driverClass="${jdbc.driverClass}" p:user="${jdbc.user}" p:password="${jdbc.password}" />

    <!--1. 第一种方式使用配置的方式设置事务-->

    <!--&lt;!&ndash;事务核心管理器,封装了所有的事务操作,依赖于连接池&ndash;&gt;-->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
        p:dataSource-ref="datasource" />

    <!--事务模板对象,手动编写事务的时候需要这样用-->
    <bean name="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate"
        p:transactionManager-ref="transactionManager" />

    <!--&lt;!&ndash;配置通知&ndash;&gt;
    <tx:advice transaction-manager="transactionManager" id="transactionInterceptor">
        <tx:attributes>
            <tx:method name="save*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="persist*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="modify*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="remove*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="get*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true" />
            <tx:method name="transfer" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        &lt;!&ndash;切点表达式&ndash;&gt;
        <aop:pointcut id="txPc" expression="execution(* cn.eason.service.impl.AccountServiceImpl.*(..))" />
        &lt;!&ndash;切面: 通知 + 切点 &ndash;&gt;
        &lt;!&ndash;advice-ref 通知&ndash;&gt;
        <aop:advisor advice-ref="transactionInterceptor" pointcut-ref="txPc" />
    </aop:config>-->


    <!--2. 第二种方式,直接使用注解的方式配置事务-->
    <tx:annotation-driven/>

</beans>
